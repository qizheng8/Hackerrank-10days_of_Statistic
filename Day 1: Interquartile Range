def median(numbers):
    if len(numbers) % 2 == 1:
        return numbers[len(numbers)//2]
    else:
        return (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])//2

def quartiles(n, numbers):
    Q1 = median(numbers[:len(numbers)//2])
    Q2 = median(numbers)
    if n%2 == 1:
        Q3 = median(numbers[(len(numbers)//2 + 1):])
    else:
        Q3 = median(numbers[(len(numbers)//2):])
    return Q1, Q2, Q3

def interquatile_range(numbers, frequencies):
	n = len(numbers)
	s = []
	for i in range(n):
		number = numbers[i]
		frequency = frequencies[i]
		for j in range(frequency):
			s.append(number)
	s.sort()
	n = len(s)
	qs = quartiles(n,s)
	result = float(qs[2] - qs[0])
	return result


m = int(input())
x = [int(numbers) for numbers in input().split()]
y = [int(numbers) for numbers in input().split()]
print(interquatile_range(x, y))
